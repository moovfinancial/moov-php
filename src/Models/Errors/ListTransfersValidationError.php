<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Moov\MoovPhp\Models\Errors;

use Moov\MoovPhp\Utils;
class ListTransfersValidationError
{
    /**
     *
     * @var ?string $accountIDs
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('accountIDs')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $accountIDs = null;

    /**
     *
     * @var ?string $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $status = null;

    /**
     *
     * @var ?string $startDateTime
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('startDateTime')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $startDateTime = null;

    /**
     *
     * @var ?string $endDateTime
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('endDateTime')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $endDateTime = null;

    /**
     *
     * @var ?string $skip
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('skip')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $skip = null;

    /**
     *
     * @var ?string $count
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('count')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $count = null;

    /**
     *
     * @var ?string $groupID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('groupID')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $groupID = null;

    /**
     *
     * @var ?string $foreignID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('foreignID')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $foreignID = null;

    /**
     *
     * @var ?string $scheduleID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('scheduleID')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $scheduleID = null;

    /**
     *
     * @var ?string $paymentLinkCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('paymentLinkCode')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $paymentLinkCode = null;

    /**
     *
     * @var ?string $refunded
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('refunded')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $refunded = null;

    /**
     *
     * @var ?string $disputed
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('disputed')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $disputed = null;

    /**
     * @param  ?string  $accountIDs
     * @param  ?string  $status
     * @param  ?string  $startDateTime
     * @param  ?string  $endDateTime
     * @param  ?string  $skip
     * @param  ?string  $count
     * @param  ?string  $groupID
     * @param  ?string  $foreignID
     * @param  ?string  $scheduleID
     * @param  ?string  $paymentLinkCode
     * @param  ?string  $refunded
     * @param  ?string  $disputed
     * @phpstan-pure
     */
    public function __construct(?string $accountIDs = null, ?string $status = null, ?string $startDateTime = null, ?string $endDateTime = null, ?string $skip = null, ?string $count = null, ?string $groupID = null, ?string $foreignID = null, ?string $scheduleID = null, ?string $paymentLinkCode = null, ?string $refunded = null, ?string $disputed = null)
    {
        $this->accountIDs = $accountIDs;
        $this->status = $status;
        $this->startDateTime = $startDateTime;
        $this->endDateTime = $endDateTime;
        $this->skip = $skip;
        $this->count = $count;
        $this->groupID = $groupID;
        $this->foreignID = $foreignID;
        $this->scheduleID = $scheduleID;
        $this->paymentLinkCode = $paymentLinkCode;
        $this->refunded = $refunded;
        $this->disputed = $disputed;
    }

    public function toException(): ListTransfersValidationErrorThrowable
    {
        $serializer = Utils\JSON::createSerializer();
        $message = $serializer->serialize($this, 'json');
        $code = -1;

        return new ListTransfersValidationErrorThrowable($message, (int) $code, $this);
    }
}