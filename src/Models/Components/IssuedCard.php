<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Moov\MoovPhp\Models\Components;


class IssuedCard
{
    /**
     *
     * @var string $issuedCardID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('issuedCardID')]
    public string $issuedCardID;

    /**
     * The card brand.
     *
     * @var CardBrand $brand
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('brand')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\MoovPhp\Models\Components\CardBrand')]
    public CardBrand $brand;

    /**
     *
     * @var string $lastFourCardNumber
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('lastFourCardNumber')]
    public string $lastFourCardNumber;

    /**
     * The expiration date of the card or token.
     *
     * @var CardExpiration $expiration
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('expiration')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\MoovPhp\Models\Components\CardExpiration')]
    public CardExpiration $expiration;

    /**
     * Fields for identifying an authorized individual.
     *
     * @var AuthorizedUser $authorizedUser
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('authorizedUser')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\MoovPhp\Models\Components\AuthorizedUser')]
    public AuthorizedUser $authorizedUser;

    /**
     * Unique identifier for the wallet funding the card.
     *
     * @var string $fundingWalletID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('fundingWalletID')]
    public string $fundingWalletID;

    /**
     * The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.
     *
     *
     * - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
     * - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
     * - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
     * - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
     *
     * @var IssuedCardState $state
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('state')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\MoovPhp\Models\Components\IssuedCardState')]
    public IssuedCardState $state;

    /**
     * Specifies the type of spend card to be issued. Presently supports virtual only, providing a digital number without a physical card.
     *
     * @var IssuedCardFormFactor $formFactor
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('formFactor')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\MoovPhp\Models\Components\IssuedCardFormFactor')]
    public IssuedCardFormFactor $formFactor;

    /**
     *
     * @var \DateTime $createdOn
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('createdOn')]
    public \DateTime $createdOn;

    /**
     * Optional descriptor for the card.
     *
     * @var ?string $memo
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('memo')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $memo = null;

    /**
     *
     * @var ?IssuingControls $controls
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('controls')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\MoovPhp\Models\Components\IssuingControls|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?IssuingControls $controls = null;

    /**
     * @param  string  $issuedCardID
     * @param  CardBrand  $brand
     * @param  string  $lastFourCardNumber
     * @param  CardExpiration  $expiration
     * @param  AuthorizedUser  $authorizedUser
     * @param  string  $fundingWalletID
     * @param  IssuedCardState  $state
     * @param  IssuedCardFormFactor  $formFactor
     * @param  \DateTime  $createdOn
     * @param  ?string  $memo
     * @param  ?IssuingControls  $controls
     * @phpstan-pure
     */
    public function __construct(string $issuedCardID, CardBrand $brand, string $lastFourCardNumber, CardExpiration $expiration, AuthorizedUser $authorizedUser, string $fundingWalletID, IssuedCardState $state, IssuedCardFormFactor $formFactor, \DateTime $createdOn, ?string $memo = null, ?IssuingControls $controls = null)
    {
        $this->issuedCardID = $issuedCardID;
        $this->brand = $brand;
        $this->lastFourCardNumber = $lastFourCardNumber;
        $this->expiration = $expiration;
        $this->authorizedUser = $authorizedUser;
        $this->fundingWalletID = $fundingWalletID;
        $this->state = $state;
        $this->formFactor = $formFactor;
        $this->createdOn = $createdOn;
        $this->memo = $memo;
        $this->controls = $controls;
    }
}