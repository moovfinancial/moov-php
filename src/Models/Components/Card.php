<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Moov\OpenAPI\Models\Components;


/** Card - Describes a card on a Moov account. */
class Card
{
    /**
     * ID of the card.
     *
     * @var string $cardID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cardID')]
    public string $cardID;

    /**
     * Uniquely identifies a linked payment card or token.
     *
     * For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
     * This field can be used to identify specific payment methods across multiple accounts on your platform.
     *
     * @var string $fingerprint
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('fingerprint')]
    public string $fingerprint;

    /**
     * The card brand.
     *
     * @var CardBrand $brand
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('brand')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\CardBrand')]
    public CardBrand $brand;

    /**
     * The type of the card.
     *
     * @var CardType $cardType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cardType')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\CardType')]
    public CardType $cardType;

    /**
     * The category or level of the card defined by the issuer.
     *
     * Examples include, but not limited to, "REWARDS", "TRADITIONAL REWARDS", "CLASSIC", and "CORPORATE PURCHASING".
     *
     * @var string $cardCategory
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cardCategory')]
    public string $cardCategory;

    /**
     * Last four digits of the card number
     *
     * @var string $lastFourCardNumber
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('lastFourCardNumber')]
    public string $lastFourCardNumber;

    /**
     * The first six to eight digits of the card number, which identifies the financial institution that issued the card.
     *
     * @var string $bin
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('bin')]
    public string $bin;

    /**
     * The expiration date of the card or token.
     *
     * @var CardExpiration $expiration
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('expiration')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\CardExpiration')]
    public CardExpiration $expiration;

    /**
     *
     * @var CardAddress $billingAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('billingAddress')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\CardAddress')]
    public CardAddress $billingAddress;

    /**
     * The results of submitting cardholder data to a card network for verification.
     *
     * @var CardVerification $cardVerification
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cardVerification')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\CardVerification')]
    public CardVerification $cardVerification;

    /**
     * Financial institution that issued the card.
     *
     * @var string $issuer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('issuer')]
    public string $issuer;

    /**
     * Country where the card was issued.
     *
     * @var string $issuerCountry
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('issuerCountry')]
    public string $issuerCountry;

    /**
     * URL of the issuer.
     *
     * @var string $issuerURL
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('issuerURL')]
    public string $issuerURL;

    /**
     * Phone number of the issuer.
     *
     * @var string $issuerPhone
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('issuerPhone')]
    public string $issuerPhone;

    /**
     * Indicates which level of domestic push-to-card transfer is supported by the card, if any.
     *
     * @var DomesticPushToCard $domesticPushToCard
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('domesticPushToCard')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\DomesticPushToCard')]
    public DomesticPushToCard $domesticPushToCard;

    /**
     * Indicates if the card supports domestic pull-from-card transfer.
     *
     * @var DomesticPullFromCard $domesticPullFromCard
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('domesticPullFromCard')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\DomesticPullFromCard')]
    public DomesticPullFromCard $domesticPullFromCard;

    /**
     * The name of the cardholder as it appears on the card.
     *
     * @var ?string $holderName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('holderName')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $holderName = null;

    /**
     * If true, the card is for commercial use, or associated with a business.
     *
     * If false, the card is associated with a general consumer.
     *
     * @var ?bool $commercial
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('commercial')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $commercial = null;

    /**
     * If true, the card issuing bank is regulated, and the scheme fees for debit transactions will be limited based on the Durbin Amendment.
     *
     * If false, the card issuing bank is not regulated, and the scheme fees will not be limited.
     *
     * @var ?bool $regulated
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('regulated')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $regulated = null;

    /**
     * Indicates cardholder has authorized card to be stored for future payments.
     *
     * @var ?bool $cardOnFile
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cardOnFile')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $cardOnFile = null;

    /**
     *
     * @var ?string $merchantAccountID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchantAccountID')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $merchantAccountID = null;

    /**
     * The results of the most recent card update request.
     *
     * @var ?CardAccountUpdater $cardAccountUpdater
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cardAccountUpdater')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\CardAccountUpdater|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CardAccountUpdater $cardAccountUpdater = null;

    /**
     * $paymentMethods
     *
     * @var ?array<BasicPaymentMethod> $paymentMethods
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('paymentMethods')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Moov\OpenAPI\Models\Components\BasicPaymentMethod>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $paymentMethods = null;

    /**
     * @param  string  $cardID
     * @param  string  $fingerprint
     * @param  CardBrand  $brand
     * @param  CardType  $cardType
     * @param  string  $cardCategory
     * @param  string  $lastFourCardNumber
     * @param  string  $bin
     * @param  CardExpiration  $expiration
     * @param  CardAddress  $billingAddress
     * @param  CardVerification  $cardVerification
     * @param  string  $issuer
     * @param  string  $issuerCountry
     * @param  string  $issuerURL
     * @param  string  $issuerPhone
     * @param  DomesticPushToCard  $domesticPushToCard
     * @param  DomesticPullFromCard  $domesticPullFromCard
     * @param  ?string  $holderName
     * @param  ?bool  $commercial
     * @param  ?bool  $regulated
     * @param  ?bool  $cardOnFile
     * @param  ?string  $merchantAccountID
     * @param  ?CardAccountUpdater  $cardAccountUpdater
     * @param  ?array<BasicPaymentMethod>  $paymentMethods
     * @phpstan-pure
     */
    public function __construct(string $cardID, string $fingerprint, CardBrand $brand, CardType $cardType, string $cardCategory, string $lastFourCardNumber, string $bin, CardExpiration $expiration, CardAddress $billingAddress, CardVerification $cardVerification, string $issuer, string $issuerCountry, string $issuerURL, string $issuerPhone, DomesticPushToCard $domesticPushToCard, DomesticPullFromCard $domesticPullFromCard, ?string $holderName = null, ?bool $commercial = null, ?bool $regulated = null, ?bool $cardOnFile = null, ?string $merchantAccountID = null, ?CardAccountUpdater $cardAccountUpdater = null, ?array $paymentMethods = null)
    {
        $this->cardID = $cardID;
        $this->fingerprint = $fingerprint;
        $this->brand = $brand;
        $this->cardType = $cardType;
        $this->cardCategory = $cardCategory;
        $this->lastFourCardNumber = $lastFourCardNumber;
        $this->bin = $bin;
        $this->expiration = $expiration;
        $this->billingAddress = $billingAddress;
        $this->cardVerification = $cardVerification;
        $this->issuer = $issuer;
        $this->issuerCountry = $issuerCountry;
        $this->issuerURL = $issuerURL;
        $this->issuerPhone = $issuerPhone;
        $this->domesticPushToCard = $domesticPushToCard;
        $this->domesticPullFromCard = $domesticPullFromCard;
        $this->holderName = $holderName;
        $this->commercial = $commercial;
        $this->regulated = $regulated;
        $this->cardOnFile = $cardOnFile;
        $this->merchantAccountID = $merchantAccountID;
        $this->cardAccountUpdater = $cardAccountUpdater;
        $this->paymentMethods = $paymentMethods;
    }
}