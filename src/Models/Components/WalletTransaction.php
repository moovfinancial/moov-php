<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Moov\OpenAPI\Models\Components;


/** WalletTransaction - A transaction that funds or deducts from the wallet. */
class WalletTransaction
{
    /**
     *
     * @var string $walletID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('walletID')]
    public string $walletID;

    /**
     *
     * @var string $transactionID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transactionID')]
    public string $transactionID;

    /**
     *
     * @var WalletTransactionType $transactionType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transactionType')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\WalletTransactionType')]
    public WalletTransactionType $transactionType;

    /**
     *
     * @var WalletTransactionSourceType $sourceType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sourceType')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\WalletTransactionSourceType')]
    public WalletTransactionSourceType $sourceType;

    /**
     * The ID of the Moov object to which this transaction is related.
     *
     * @var string $sourceID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sourceID')]
    public string $sourceID;

    /**
     *
     * @var WalletTransactionStatus $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\Type('\Moov\OpenAPI\Models\Components\WalletTransactionStatus')]
    public WalletTransactionStatus $status;

    /**
     * Detailed description of the transaction.
     *
     * @var string $memo
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('memo')]
    public string $memo;

    /**
     *
     * @var \DateTime $createdOn
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('createdOn')]
    public \DateTime $createdOn;

    /**
     * A 3-letter ISO 4217 currency code.
     *
     * @var string $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    public string $currency;

    /**
     * The total transaction amount. The amount is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
     *
     * @var int $grossAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('grossAmount')]
    public int $grossAmount;

    /**
     * The total transaction amount. Same as `grossAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
     *
     * @var string $grossAmountDecimal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('grossAmountDecimal')]
    public string $grossAmountDecimal;

    /**
     * Total fees paid for the transaction. The value is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
     *
     * @var int $fee
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('fee')]
    public int $fee;

    /**
     * Total fees paid for the transaction. Same as `fee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
     *
     * @var string $feeDecimal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('feeDecimal')]
    public string $feeDecimal;

    /**
     * Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. The amount is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
     *
     * @var int $netAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('netAmount')]
    public int $netAmount;

    /**
     * Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. Same as `netAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
     *
     * @var string $netAmountDecimal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('netAmountDecimal')]
    public string $netAmountDecimal;

    /**
     *
     * @var ?\DateTime $completedOn
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('completedOn')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $completedOn = null;

    /**
     * The IDs of the fees paid for the transaction.
     *
     * @var ?array<string> $feeIDs
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('feeIDs')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $feeIDs = null;

    /**
     * The wallet's total available balance after recording a completed transaction. The value is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
     *
     * @var ?int $availableBalance
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('availableBalance')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $availableBalance = null;

    /**
     * The wallet's total available balance after recording a completed transaction. Same as `availableBalance`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
     *
     * @var ?string $availableBalanceDecimal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('availableBalanceDecimal')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $availableBalanceDecimal = null;

    /**
     *
     * @var ?string $sweepID
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sweepID')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $sweepID = null;

    /**
     * @param  string  $walletID
     * @param  string  $transactionID
     * @param  WalletTransactionType  $transactionType
     * @param  WalletTransactionSourceType  $sourceType
     * @param  string  $sourceID
     * @param  WalletTransactionStatus  $status
     * @param  string  $memo
     * @param  \DateTime  $createdOn
     * @param  string  $currency
     * @param  int  $grossAmount
     * @param  string  $grossAmountDecimal
     * @param  int  $fee
     * @param  string  $feeDecimal
     * @param  int  $netAmount
     * @param  string  $netAmountDecimal
     * @param  ?\DateTime  $completedOn
     * @param  ?array<string>  $feeIDs
     * @param  ?int  $availableBalance
     * @param  ?string  $availableBalanceDecimal
     * @param  ?string  $sweepID
     * @phpstan-pure
     */
    public function __construct(string $walletID, string $transactionID, WalletTransactionType $transactionType, WalletTransactionSourceType $sourceType, string $sourceID, WalletTransactionStatus $status, string $memo, \DateTime $createdOn, string $currency, int $grossAmount, string $grossAmountDecimal, int $fee, string $feeDecimal, int $netAmount, string $netAmountDecimal, ?\DateTime $completedOn = null, ?array $feeIDs = null, ?int $availableBalance = null, ?string $availableBalanceDecimal = null, ?string $sweepID = null)
    {
        $this->walletID = $walletID;
        $this->transactionID = $transactionID;
        $this->transactionType = $transactionType;
        $this->sourceType = $sourceType;
        $this->sourceID = $sourceID;
        $this->status = $status;
        $this->memo = $memo;
        $this->createdOn = $createdOn;
        $this->currency = $currency;
        $this->grossAmount = $grossAmount;
        $this->grossAmountDecimal = $grossAmountDecimal;
        $this->fee = $fee;
        $this->feeDecimal = $feeDecimal;
        $this->netAmount = $netAmount;
        $this->netAmountDecimal = $netAmountDecimal;
        $this->completedOn = $completedOn;
        $this->feeIDs = $feeIDs;
        $this->availableBalance = $availableBalance;
        $this->availableBalanceDecimal = $availableBalanceDecimal;
        $this->sweepID = $sweepID;
    }
}